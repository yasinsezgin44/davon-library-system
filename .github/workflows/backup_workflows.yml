name: "n8n Workflows Backup"

on:
  schedule:
    - cron: "0 21 * * *" # Runs daily at 00:00 Turkey time (UTC+3)
  workflow_dispatch:

# To filter workflows, set WORKFLOW_FILTER variable in repository settings
# Examples: "Agentic_RAG", "SQL", "production" (case-insensitive regex)

jobs:
  backup:
    runs-on: ubuntu-latest
    steps:
      # 1. Checks out your repository so the workflow can access it
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Create directories to store backups
      - name: Create workflows directory
        run: mkdir -p ./workflows

      # 3. Download all workflows from n8n REST API using JWT token authentication
      - name: Download n8n workflows
        env:
          N8N_JWT_TOKEN: ${{ secrets.N8N_JWT_TOKEN }}
          N8N_URL: ${{ secrets.N8N_URL }}
          N8N_BASIC_USER: ${{ secrets.N8N_BASIC_USER }}
          N8N_BASIC_PASS: ${{ secrets.N8N_BASIC_PASS }}
          WORKFLOW_FILTER: ${{ vars.WORKFLOW_FILTER || '' }}
        run: |
          # Check for required credentials
          if [ -z "$N8N_JWT_TOKEN" ]; then
            echo "::error::The N8N_JWT_TOKEN secret is missing."
            exit 1
          fi

          # Normalize N8N_URL (remove trailing slash if present)
          N8N_URL="${N8N_URL%/}"

          # If Basic Auth is provided, add it
          BASIC_ARGS=()
          if [ -n "$N8N_BASIC_USER" ] && [ -n "$N8N_BASIC_PASS" ]; then
            BASIC_ARGS=( -u "$N8N_BASIC_USER:$N8N_BASIC_PASS" )
            echo "Using Basic Auth."
          fi

          # Use the working authentication method (API key with /api/v1/workflows)
          echo "Connecting to n8n API using API key authentication..."
          LIST_URL="$N8N_URL/api/v1/workflows"
          AUTH_HEADER="X-N8N-API-KEY: $N8N_JWT_TOKEN"

          HTTP_BODY=$(curl -s --request GET \
            --url "$LIST_URL" \
            --header "$AUTH_HEADER" \
            --header 'Content-Type: application/json' \
            --write-out "%{http_code}" \
            "${BASIC_ARGS[@]}")

          HTTP_STATUS="${HTTP_BODY: -3}"
          HTTP_BODY="${HTTP_BODY%???}"

          if [[ "$HTTP_STATUS" -lt 200 || "$HTTP_STATUS" -ge 300 ]]; then
            echo "::error::Failed to fetch workflows. Server responded with HTTP status $HTTP_STATUS."
            echo "::error::Server Response Body: $HTTP_BODY"
            echo "Please check your N8N_URL and N8N_JWT_TOKEN secrets."
            exit 1
          fi

          echo "Successfully fetched workflow list (HTTP $HTTP_STATUS)."

          # Store the working authentication method for individual workflow downloads
          WORKING_AUTH_HEADER="$AUTH_HEADER"
          WORKING_LIST_URL_BASE="${LIST_URL%/workflows}"

          # Parse and filter the list of workflows from the .data array
          if [ -n "$WORKFLOW_FILTER" ]; then
            echo "Applying workflow filter: '$WORKFLOW_FILTER'"
            echo "$HTTP_BODY" | jq -c --arg filter "$WORKFLOW_FILTER" '.data[] | select(.name | test($filter; "i")) | {id: .id, name: .name}' > workflows.tmp
            WORKFLOW_COUNT=$(wc -l < workflows.tmp)
            echo "Found $WORKFLOW_COUNT workflows matching filter '$WORKFLOW_FILTER'"
          else
            echo "No filter applied - downloading all workflows"
            echo "$HTTP_BODY" | jq -c '.data[] | {id: .id, name: .name}' > workflows.tmp
            WORKFLOW_COUNT=$(wc -l < workflows.tmp)
            echo "Found $WORKFLOW_COUNT total workflows"
          fi

          while IFS= read -r line; do
            id=$(echo "$line" | jq -r '.id')
            name=$(echo "$line" | jq -r '.name' | sed 's/[/:<>:"\\|?*]/_/g') # Sanitize filename
            
            echo "Downloading workflow: $name (ID: $id)"
            ITEM_URL="$WORKING_LIST_URL_BASE/workflows/$id"

            workflow_response=$(curl -s --request GET \
              --url "$ITEM_URL" \
              --header "$WORKING_AUTH_HEADER" \
              "${BASIC_ARGS[@]}")

            if echo "$workflow_response" | jq -e '.' > /dev/null 2>&1; then
              echo "$workflow_response" > "./workflows/${name} (${id}).json"
            else
              echo "Warning: Invalid JSON response for workflow $id. Skipping."
            fi
          done < workflows.tmp
          rm workflows.tmp

      # 4. Commit and push changes to a backup branch
      - name: Create backup branch and commit workflows
        run: |
          # Create and switch to backup branch
          git checkout -b n8n-workflows-backup 2>/dev/null || git checkout n8n-workflows-backup

          # Check if there are any changes to commit
          if git diff --quiet workflows/*.json 2>/dev/null; then
            echo "No changes to commit - workflows are up to date"
          else
            # Add and commit the workflow files
            git add workflows/*.json
            git config user.name "GitHub Actions"
            git config user.email "actions@github.com"
            git commit -m "Automated n8n workflow backup - $(date '+%Y-%m-%d %H:%M:%S')" || echo "No changes to commit"

            # Push to backup branch
            git push origin n8n-workflows-backup --force
            echo "âœ… Workflows committed to n8n-workflows-backup branch"
          fi
