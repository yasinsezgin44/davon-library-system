"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataTable = void 0;
var React = __importStar(require("react"));
var react_1 = require("react");
var ra_core_1 = require("ra-core");
var material_1 = require("@mui/material");
var clsx_1 = __importDefault(require("clsx"));
var BulkActionsToolbar_1 = require("../BulkActionsToolbar");
var button_1 = require("../../button");
var ListNoResults_1 = require("../ListNoResults");
var DataTableRoot_1 = require("./DataTableRoot");
var DataTableLoading_1 = require("./DataTableLoading");
var DataTableBody_1 = require("./DataTableBody");
var DataTableHead_1 = require("./DataTableHead");
var DataTableColumn_1 = require("./DataTableColumn");
var DataTableNumberColumn_1 = require("./DataTableNumberColumn");
var ColumnsSelector_1 = require("./ColumnsSelector");
var DataTableRowSxContext_1 = require("./DataTableRowSxContext");
var DefaultEmpty = React.createElement(ListNoResults_1.ListNoResults, null);
var DefaultFoot = function (_props) { return null; };
var PREFIX = 'RaDataTable';
/**
 * The DataTable component renders a list of records as a table.
 * It is usually used as a child of the <List> and <ReferenceManyField> components.
 *
 * Props:
 *  - body
 *  - bulkActionToolbar
 *  - bulkActionButtons
 *  - children
 *  - empty
 *  - expand
 *  - footer
 *  - header
 *  - hover
 *  - isRowExpandable
 *  - isRowSelectable
 *  - rowClick
 *  - rowSx
 *  - size
 *  - sx
 *
 * @example // Display all posts as a data table
 * const postRowSx = (record, index) => ({
 *     backgroundColor: record.nb_views >= 500 ? '#efe' : 'white',
 * });
 * export const PostList = () => (
 *     <List>
 *         <DataTable rowSx={postRowSx}>
 *             <DataTable.Col source="id" />
 *             <DataTable.Col source="title" />
 *             <DataTable.Col source="body" />
 *             <DataTable.Col>
 *                 <EditButton />
 *             </DataTable.Col>
 *         </DataTable>
 *     </List>
 * );
 *
 * @example // Display all the comments of the current post as a data table
 * <ReferenceManyField reference="comments" target="post_id">
 *     <DataTable>
 *         <DataTable.Col source="id" />
 *         <DataTable.Col source="body" />
 *         <DataTable.Col source="created_at" />
 *         <DataTable.Col>
 *             <EditButton />
 *         </DataTable.Col>
 *     </DataTable>
 * </ReferenceManyField>
 *
 * @example // Usage outside of a <List> or a <ReferenceManyField>.
 *
 * const sort = { field: 'published_at', order: 'DESC' };
 *
 * export const MyCustomList = (props) => {
 *     const { data, total, isPending } = useGetList(
 *         'posts',
 *         { pagination: { page: 1, perPage: 10 }, sort: sort }
 *     );
 *
 *     return (
 *         <DataTable
 *             data={data}
 *             total={total}
 *             isPending={isPending}
 *             sort={sort}
 *             selectedIds={[]}
 *             setSort={() => {
 *                 console.log('set sort');
 *             }}
 *             onSelect={() => {
 *                 console.log('on select');
 *             }}
 *             onToggleItem={() => {
 *                 console.log('on toggle item');
 *             }}
 *         >
 *             <DataTable.Col source="id" />
 *             <DataTable.Col source="title" />
 *         </DataTable>
 *     );
 * }
 */
exports.DataTable = React.forwardRef(function DataTable(inProps, ref) {
    var props = (0, material_1.useThemeProps)({
        props: inProps,
        name: PREFIX,
    });
    var resourceFromContext = (0, ra_core_1.useResourceContext)(props);
    var canDelete = (0, ra_core_1.useCanAccess)({
        resource: resourceFromContext,
        action: 'delete',
    }).canAccess;
    var _a = props.body, TableBody = _a === void 0 ? DataTableBody_1.DataTableBody : _a, _b = props.head, TableHead = _b === void 0 ? DataTableHead_1.DataTableHead : _b, _c = props.foot, TableFoot = _c === void 0 ? DefaultFoot : _c, children = props.children, className = props.className, _d = props.empty, empty = _d === void 0 ? DefaultEmpty : _d, expand = props.expand, bulkActionsToolbar = props.bulkActionsToolbar, _e = props.bulkActionButtons, bulkActionButtons = _e === void 0 ? canDelete ? defaultBulkActionButtons : false : _e, rowSx = props.rowSx, _f = props.size, size = _f === void 0 ? 'small' : _f, sx = props.sx, rest = __rest(props, ["body", "head", "foot", "children", "className", "empty", "expand", "bulkActionsToolbar", "bulkActionButtons", "rowSx", "size", "sx"]);
    var onToggleItem = (0, ra_core_1.useListContextWithProps)(props).onToggleItem;
    var hasBulkActions = !!bulkActionButtons !== false;
    var storeKey = props.storeKey || "".concat(resourceFromContext, ".datatable");
    var columnRanks = (0, ra_core_1.useStore)("".concat(storeKey, "_columnRanks"))[0];
    var columns = columnRanks
        ? reorderChildren(children, columnRanks)
        : children;
    var loading = (React.createElement(DataTableLoading_1.DataTableLoading, { className: className, expand: expand, hasBulkActions: hasBulkActions, nbChildren: React.Children.count(children), size: size }));
    return (React.createElement(ra_core_1.DataTableBase, __assign({}, props, { hasBulkActions: hasBulkActions, loading: loading, empty: empty }),
        React.createElement(DataTableRowSxContext_1.DataTableRowSxContext.Provider, { value: rowSx },
            React.createElement(DataTableRoot_1.DataTableRoot, { sx: sx, className: (0, clsx_1.default)(DataTableRoot_1.DataTableClasses.root, className) },
                onToggleItem &&
                    (bulkActionsToolbar !== null && bulkActionsToolbar !== void 0 ? bulkActionsToolbar : (bulkActionButtons !== false && (React.createElement(BulkActionsToolbar_1.BulkActionsToolbar, null, (0, react_1.isValidElement)(bulkActionButtons)
                        ? bulkActionButtons
                        : defaultBulkActionButtons)))),
                React.createElement("div", { className: DataTableRoot_1.DataTableClasses.tableWrapper },
                    React.createElement(material_1.Table, __assign({ ref: ref, className: DataTableRoot_1.DataTableClasses.table, size: size }, sanitizeRestProps(rest)),
                        React.createElement(ra_core_1.DataTableRenderContext.Provider, { value: "header" },
                            React.createElement(TableHead, null, columns)),
                        React.createElement(TableBody, null, columns),
                        React.createElement(ra_core_1.DataTableRenderContext.Provider, { value: "footer" },
                            React.createElement(TableFoot, null, columns)))))),
        React.createElement(ra_core_1.DataTableRenderContext.Provider, { value: "columnsSelector" },
            React.createElement(ColumnsSelector_1.ColumnsSelector, null, children))));
});
exports.DataTable.Col = DataTableColumn_1.DataTableColumn;
exports.DataTable.NumberCol = DataTableNumberColumn_1.DataTableNumberColumn;
exports.DataTable.displayName = 'DataTable';
var defaultBulkActionButtons = React.createElement(button_1.BulkDeleteButton, null);
/**
 * Reorder children based on columnRanks
 *
 * Note that columnRanks may be shorter than the number of children
 */
var reorderChildren = function (children, columnRanks) {
    return React.Children.toArray(children).reduce(function (acc, child, index) {
        var rank = columnRanks.indexOf(index);
        if (rank === -1) {
            // if the column is not in columnRanks, keep it at the same index
            acc[index] = child;
        }
        else {
            // if the column is in columnRanks, move it to the rank index
            acc[rank] = child;
        }
        return acc;
    }, []);
};
var sanitizeRestProps = function (_a) {
    var sort = _a.sort, data = _a.data, expandSingle = _a.expandSingle, hiddenColumns = _a.hiddenColumns, hover = _a.hover, isLoading = _a.isLoading, isPending = _a.isPending, isRowExpandable = _a.isRowExpandable, isRowSelectable = _a.isRowSelectable, onSelect = _a.onSelect, onToggleItem = _a.onToggleItem, resource = _a.resource, rowClick = _a.rowClick, setSort = _a.setSort, selectedIds = _a.selectedIds, storeKey = _a.storeKey, total = _a.total, rest = __rest(_a, ["sort", "data", "expandSingle", "hiddenColumns", "hover", "isLoading", "isPending", "isRowExpandable", "isRowSelectable", "onSelect", "onToggleItem", "resource", "rowClick", "setSort", "selectedIds", "storeKey", "total"]);
    return rest;
};
//# sourceMappingURL=DataTable.js.map