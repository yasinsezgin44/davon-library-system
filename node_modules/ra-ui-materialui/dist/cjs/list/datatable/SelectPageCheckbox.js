"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectPageCheckbox = void 0;
var React = __importStar(require("react"));
var react_1 = require("react");
var ra_core_1 = require("ra-core");
var material_1 = require("@mui/material");
var SelectPageCheckbox = function () {
    var data = (0, ra_core_1.useDataTableDataContext)();
    var _a = (0, ra_core_1.useDataTableCallbacksContext)(), isRowSelectable = _a.isRowSelectable, onSelect = _a.onSelect;
    var selectedIds = (0, ra_core_1.useDataTableSelectedIdsContext)();
    var translate = (0, ra_core_1.useTranslate)();
    var handleSelectAll = (0, react_1.useCallback)(function (event) {
        if (!onSelect || !selectedIds || !data)
            return;
        onSelect(event.target.checked
            ? selectedIds.concat(data
                .filter(function (record) { return !selectedIds.includes(record.id); })
                .filter(function (record) {
                return isRowSelectable
                    ? isRowSelectable(record)
                    : true;
            })
                .map(function (record) { return record.id; }))
            : []);
    }, [data, onSelect, isRowSelectable, selectedIds]);
    var selectableIds = Array.isArray(data)
        ? isRowSelectable
            ? data
                .filter(function (record) { return isRowSelectable(record); })
                .map(function (record) { return record.id; })
            : data.map(function (record) { return record.id; })
        : [];
    return (React.createElement(material_1.Checkbox, { inputProps: {
            'aria-label': translate('ra.action.select_all', {
                _: 'Select all',
            }),
        }, className: "select-all", color: "primary", checked: selectedIds &&
            selectedIds.length > 0 &&
            selectableIds.length > 0 &&
            selectableIds.every(function (id) { return selectedIds.includes(id); }), onChange: handleSelectAll, onClick: function (e) { return e.stopPropagation(); } }));
};
exports.SelectPageCheckbox = SelectPageCheckbox;
//# sourceMappingURL=SelectPageCheckbox.js.map