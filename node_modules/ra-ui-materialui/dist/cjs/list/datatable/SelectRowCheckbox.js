"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectRowCheckbox = void 0;
var react_1 = __importStar(require("react"));
var material_1 = require("@mui/material");
var ra_core_1 = require("ra-core");
var DataTableRoot_1 = require("./DataTableRoot");
exports.SelectRowCheckbox = (0, react_1.memo)(function () {
    var _a = (0, ra_core_1.useDataTableCallbacksContext)(), handleToggleItem = _a.handleToggleItem, isRowSelectable = _a.isRowSelectable;
    var selectedIds = (0, ra_core_1.useDataTableSelectedIdsContext)();
    var translate = (0, ra_core_1.useTranslate)();
    var record = (0, ra_core_1.useRecordContext)();
    if (!record) {
        throw new Error('SelectRowTableCell can only be used within a RecordContext');
    }
    var selectable = !isRowSelectable || isRowSelectable(record);
    var selected = selectedIds === null || selectedIds === void 0 ? void 0 : selectedIds.includes(record.id);
    var handleToggleSelection = (0, react_1.useCallback)(function (event) {
        if (!selectable || !handleToggleItem)
            return;
        handleToggleItem(record.id, event);
        event.stopPropagation();
    }, [record.id, handleToggleItem, selectable]);
    return (react_1.default.createElement(material_1.Checkbox, { "aria-label": translate('ra.action.select_row', {
            _: 'Select this row',
        }), color: "primary", className: "select-item ".concat(DataTableRoot_1.DataTableClasses.checkbox), checked: selectable && selected, onClick: handleToggleSelection, disabled: !selectable }));
});
exports.SelectRowCheckbox.displayName = 'SelectRowTableCell';
//# sourceMappingURL=SelectRowCheckbox.js.map