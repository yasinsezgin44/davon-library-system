import React, { type ComponentType, type ReactNode } from 'react';
import { type ComponentsOverrides, type SxProps, type Theme } from '@mui/material/styles';
import { type DropzoneOptions } from 'react-dropzone';
import { type SvgIconProps } from '@mui/material';
import type { CommonInputProps } from './CommonInputProps';
export declare const FileInput: (inProps: FileInputProps) => React.JSX.Element;
export declare const FileInputClasses: {
    dropZone: string;
    removeButton: string;
};
export type FileInputProps = CommonInputProps & {
    accept?: DropzoneOptions['accept'];
    className?: string;
    children?: ReactNode;
    labelMultiple?: string;
    labelSingle?: string;
    maxSize?: DropzoneOptions['maxSize'];
    minSize?: DropzoneOptions['minSize'];
    multiple?: DropzoneOptions['multiple'];
    options?: DropzoneOptions;
    onRemove?: Function;
    placeholder?: ReactNode;
    removeIcon?: ComponentType<SvgIconProps>;
    inputProps?: any;
    validateFileRemoval?(file: any): boolean | Promise<boolean>;
    sx?: SxProps<Theme>;
};
declare module '@mui/material/styles' {
    interface ComponentNameToClassKey {
        RaFileInput: 'root' | 'dropZone' | 'removeButton';
    }
    interface ComponentsPropsList {
        RaFileInput: Partial<FileInputProps>;
    }
    interface Components {
        RaFileInput?: {
            defaultProps?: ComponentsPropsList['RaFileInput'];
            styleOverrides?: ComponentsOverrides<Omit<Theme, 'components'>>['RaFileInput'];
        };
    }
}
//# sourceMappingURL=FileInput.d.ts.map