import React, { type ComponentType, type ErrorInfo } from 'react';
import { type ComponentsOverrides, type SxProps, type Theme } from '@mui/material/styles';
import { type AppBarProps } from './AppBar';
import { type SidebarProps } from './Sidebar';
import { type MenuProps } from './Menu';
import { type ErrorProps } from './Error';
export declare const Layout: (inProps: LayoutProps) => React.JSX.Element;
export interface LayoutProps {
    appBar?: ComponentType<AppBarProps>;
    appBarAlwaysOn?: boolean;
    className?: string;
    children: React.ReactNode;
    error?: ComponentType<ErrorProps>;
    menu?: ComponentType<MenuProps>;
    sidebar?: ComponentType<SidebarProps>;
    sx?: SxProps<Theme>;
}
export interface LayoutState {
    hasError: boolean;
    error?: Error;
    errorInfo?: ErrorInfo;
}
export declare const LayoutClasses: {
    appFrame: string;
    contentWithSidebar: string;
    content: string;
};
declare module '@mui/material/styles' {
    interface ComponentNameToClassKey {
        RaLayout: 'root' | 'appFrame' | 'contentWithSidebar' | 'content';
    }
    interface ComponentsPropsList {
        RaLayout: Partial<LayoutProps>;
    }
    interface Components {
        RaLayout?: {
            defaultProps?: ComponentsPropsList['RaLayout'];
            styleOverrides?: ComponentsOverrides<Omit<Theme, 'components'>>['RaLayout'];
        };
    }
}
//# sourceMappingURL=Layout.d.ts.map