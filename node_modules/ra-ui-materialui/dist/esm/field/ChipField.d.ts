import * as React from 'react';
import { type ComponentsOverrides } from '@mui/material/styles';
import { type ChipProps } from '@mui/material';
import type { FieldProps } from './types';
export declare const ChipField: {
    <RecordType extends Record<string, any> = Record<string, any>>(inProps: ChipFieldProps<RecordType>): React.JSX.Element | null;
    displayName: string;
};
export interface ChipFieldProps<RecordType extends Record<string, any> = Record<string, any>> extends FieldProps<RecordType>, Omit<ChipProps, 'label' | 'children'> {
    /**
     * @internal do not use (prop required for TS to be able to cast ChipField as FunctionComponent)
     */
    children?: React.ReactNode;
}
declare module '@mui/material/styles' {
    interface ComponentNameToClassKey {
        RaChipField: 'root' | 'chip';
    }
    interface ComponentsPropsList {
        RaChipField: Partial<ChipFieldProps>;
    }
    interface Components {
        RaChipField?: {
            defaultProps?: ComponentsPropsList['RaChipField'];
            styleOverrides?: ComponentsOverrides<Omit<Theme, 'components'>>['RaChipField'];
        };
    }
}
//# sourceMappingURL=ChipField.d.ts.map