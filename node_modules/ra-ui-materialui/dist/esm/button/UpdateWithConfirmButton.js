var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { Fragment, useState } from 'react';
import ActionUpdate from '@mui/icons-material/Update';
import { styled, useThemeProps, } from '@mui/material/styles';
import { useTranslate, useNotify, useResourceContext, useRecordContext, useUpdate, useGetRecordRepresentation, } from 'ra-core';
import { Confirm } from '../layout';
import { Button } from './Button';
import { humanize, inflect } from 'inflection';
export var UpdateWithConfirmButton = function (inProps) {
    var props = useThemeProps({
        props: inProps,
        name: PREFIX,
    });
    var notify = useNotify();
    var translate = useTranslate();
    var resource = useResourceContext(props);
    var _a = useState(false), isOpen = _a[0], setOpen = _a[1];
    var record = useRecordContext(props);
    var confirmTitleProp = props.confirmTitle, confirmContentProp = props.confirmContent, data = props.data, _b = props.icon, icon = _b === void 0 ? defaultIcon : _b, _c = props.label, label = _c === void 0 ? 'ra.action.update' : _c, _d = props.mutationMode, mutationMode = _d === void 0 ? 'pessimistic' : _d, onClick = props.onClick, _e = props.mutationOptions, mutationOptions = _e === void 0 ? {} : _e, rest = __rest(props, ["confirmTitle", "confirmContent", "data", "icon", "label", "mutationMode", "onClick", "mutationOptions"]);
    var mutationMeta = mutationOptions.meta, _f = mutationOptions.onSuccess, onSuccess = _f === void 0 ? function () {
        notify("resources.".concat(resource, ".notifications.updated"), {
            type: 'info',
            messageArgs: {
                smart_count: 1,
                _: translate('ra.notification.updated', { smart_count: 1 }),
            },
            undoable: mutationMode === 'undoable',
        });
    } : _f, _g = mutationOptions.onError, onError = _g === void 0 ? function (error) {
        notify(typeof error === 'string'
            ? error
            : error.message || 'ra.notification.http_error', {
            type: 'error',
            messageArgs: {
                _: typeof error === 'string'
                    ? error
                    : error && error.message
                        ? error.message
                        : undefined,
            },
        });
    } : _g, _h = mutationOptions.onSettled, onSettled = _h === void 0 ? function () {
        setOpen(false);
    } : _h, otherMutationOptions = __rest(mutationOptions, ["meta", "onSuccess", "onError", "onSettled"]);
    var _j = useUpdate(resource, { id: record === null || record === void 0 ? void 0 : record.id, data: data, meta: mutationMeta, previousData: record }, __assign({ onSuccess: onSuccess, onError: onError, onSettled: onSettled, mutationMode: mutationMode }, otherMutationOptions)), update = _j[0], isPending = _j[1].isPending;
    var handleClick = function (e) {
        setOpen(true);
        e.stopPropagation();
    };
    var handleDialogClose = function () {
        setOpen(false);
    };
    var handleUpdate = function (e) {
        update(resource, {
            id: record === null || record === void 0 ? void 0 : record.id,
            data: data,
            meta: mutationMeta,
            previousData: record,
        });
        if (typeof onClick === 'function') {
            onClick(e);
        }
    };
    var getRecordRepresentation = useGetRecordRepresentation(resource);
    var recordRepresentation = getRecordRepresentation(record);
    var confirmContent = "resources.".concat(resource, ".message.bulk_update_content");
    var confirmTitle = "resources.".concat(resource, ".message.bulk_update_title");
    var resourceName = translate("resources.".concat(resource, ".forcedCaseName"), {
        smart_count: 1,
        _: humanize(translate("resources.".concat(resource, ".name"), {
            smart_count: 1,
            _: resource ? inflect(resource, 1) : undefined,
        }), true),
    });
    // We don't support React elements for this
    if (React.isValidElement(recordRepresentation)) {
        recordRepresentation = "#".concat(record === null || record === void 0 ? void 0 : record.id);
    }
    return (React.createElement(Fragment, null,
        React.createElement(StyledButton, __assign({ onClick: handleClick, label: label }, sanitizeRestProps(rest)), icon),
        React.createElement(Confirm, { isOpen: isOpen, loading: isPending, title: confirmTitleProp !== null && confirmTitleProp !== void 0 ? confirmTitleProp : confirmTitle, content: confirmContentProp !== null && confirmContentProp !== void 0 ? confirmContentProp : confirmContent, titleTranslateOptions: {
                smart_count: 1,
                name: resourceName,
                recordRepresentation: recordRepresentation,
                _: translate('ra.message.bulk_update_title', {
                    smart_count: 1,
                    name: resourceName,
                    recordRepresentation: recordRepresentation,
                }),
            }, contentTranslateOptions: {
                smart_count: 1,
                name: resourceName,
                recordRepresentation: recordRepresentation,
                _: translate('ra.message.bulk_update_content', {
                    smart_count: 1,
                    name: resourceName,
                    recordRepresentation: recordRepresentation,
                }),
            }, onConfirm: handleUpdate, onClose: handleDialogClose })));
};
var sanitizeRestProps = function (_a) {
    var label = _a.label, rest = __rest(_a, ["label"]);
    return rest;
};
var PREFIX = 'RaUpdateWithConfirmButton';
var StyledButton = styled(Button, {
    name: PREFIX,
    overridesResolver: function (props, styles) { return styles.root; },
})(function (_a) {
    var theme = _a.theme;
    return ({
        color: (theme.vars || theme).palette.primary.main,
        '&:hover': {
            backgroundColor: "color-mix(in srgb, ".concat((theme.vars || theme).palette.primary.main, ", transparent 12%)"),
            // Reset on mouse devices
            '@media (hover: none)': {
                backgroundColor: 'transparent',
            },
        },
    });
});
var defaultIcon = React.createElement(ActionUpdate, null);
//# sourceMappingURL=UpdateWithConfirmButton.js.map