var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { RecordContextProvider, useDataTableDataContext } from 'ra-core';
import { TableBody, useThemeProps } from '@mui/material';
import { styled } from '@mui/material/styles';
import clsx from 'clsx';
import { DataTableClasses } from './DataTableRoot';
import { DataTableRow } from './DataTableRow';
import { useDataTableRowSxContext } from './DataTableRowSxContext';
var PREFIX = 'RaDataTableBody';
export var DataTableBody = React.memo(React.forwardRef(function (inProps, ref) {
    var props = useThemeProps({
        props: inProps,
        name: PREFIX,
    });
    var children = props.children, _a = props.row, TableRow = _a === void 0 ? DataTableRow : _a, className = props.className, rest = __rest(props, ["children", "row", "className"]);
    var data = useDataTableDataContext();
    var rowSx = useDataTableRowSxContext();
    return (React.createElement(TableBodyStyled, __assign({ ref: ref, className: clsx('datatable-body', className, DataTableClasses.tbody) }, rest), data === null || data === void 0 ? void 0 : data.map(function (record, rowIndex) {
        var _a;
        var _b;
        return (React.createElement(RecordContextProvider, { value: record, key: (_b = record.id) !== null && _b !== void 0 ? _b : "row".concat(rowIndex) },
            React.createElement(TableRow, { className: clsx(DataTableClasses.row, (_a = {},
                    _a[DataTableClasses.rowEven] = rowIndex % 2 === 0,
                    _a[DataTableClasses.rowOdd] = rowIndex % 2 !== 0,
                    _a)), sx: rowSx === null || rowSx === void 0 ? void 0 : rowSx(record, rowIndex) }, children)));
    })));
}));
DataTableBody.displayName = 'DataTableBody';
var TableBodyStyled = styled(TableBody, {
    name: PREFIX,
    overridesResolver: function (props, styles) { return styles.root; },
})(function () { return ({}); });
//# sourceMappingURL=DataTableBody.js.map