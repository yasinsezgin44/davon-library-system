var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
import * as React from 'react';
import { useResourceContext, useStore, useTranslateLabel, useDataTableStoreContext, useDataTableColumnRankContext, } from 'ra-core';
import { FieldToggle } from '../../preferences';
export var ColumnsSelectorItem = function (_a) {
    var source = _a.source, label = _a.label;
    var resource = useResourceContext();
    var _b = useDataTableStoreContext(), storeKey = _b.storeKey, defaultHiddenColumns = _b.defaultHiddenColumns;
    var _c = useStore(storeKey, defaultHiddenColumns), hiddenColumns = _c[0], setHiddenColumns = _c[1];
    var columnRank = useDataTableColumnRankContext();
    var _d = useStore("".concat(storeKey, "_columnRanks")), columnRanks = _d[0], setColumnRanks = _d[1];
    var translateLabel = useTranslateLabel();
    if (!source && !label)
        return null;
    var fieldLabel = translateLabel({
        label: typeof label === 'string' ? label : undefined,
        resource: resource,
        source: source,
    });
    var isColumnHidden = hiddenColumns.includes(source);
    var handleMove = function (index1, index2) {
        var colRanks = !columnRanks
            ? padRanks([], Math.max(index1, index2) + 1)
            : Math.max(index1, index2) > columnRanks.length - 1
                ? padRanks(columnRanks, Math.max(index1, index2) + 1)
                : columnRanks;
        var index1Pos = colRanks.findIndex(
        // eslint-disable-next-line eqeqeq
        function (index) { return index == index1; });
        var index2Pos = colRanks.findIndex(
        // eslint-disable-next-line eqeqeq
        function (index) { return index == index2; });
        if (index1Pos === -1 || index2Pos === -1) {
            return;
        }
        var newColumnRanks;
        if (index1Pos > index2Pos) {
            newColumnRanks = __spreadArray(__spreadArray(__spreadArray(__spreadArray([], colRanks.slice(0, index2Pos), true), [
                colRanks[index1Pos]
            ], false), colRanks.slice(index2Pos, index1Pos), true), colRanks.slice(index1Pos + 1), true);
        }
        else {
            newColumnRanks = __spreadArray(__spreadArray(__spreadArray(__spreadArray([], colRanks.slice(0, index1Pos), true), colRanks.slice(index1Pos + 1, index2Pos + 1), true), [
                colRanks[index1Pos]
            ], false), colRanks.slice(index2Pos + 1), true);
        }
        setColumnRanks(newColumnRanks);
    };
    return (React.createElement(FieldToggle, { key: columnRank, source: source, label: fieldLabel, index: String(columnRank), selected: !isColumnHidden, onToggle: function () {
            return isColumnHidden
                ? setHiddenColumns(hiddenColumns.filter(function (column) { return column !== source; }))
                : setHiddenColumns(__spreadArray(__spreadArray([], hiddenColumns, true), [source], false));
        }, onMove: handleMove }));
};
var padRanks = function (ranks, length) {
    return ranks.concat(Array.from({ length: length - ranks.length }, function (_, i) { return ranks.length + i; }));
};
//# sourceMappingURL=ColumnsSelectorItem.js.map