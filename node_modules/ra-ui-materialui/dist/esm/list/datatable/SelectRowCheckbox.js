import React, { useCallback, memo } from 'react';
import { Checkbox } from '@mui/material';
import { useDataTableSelectedIdsContext, useDataTableCallbacksContext, useTranslate, useRecordContext, } from 'ra-core';
import { DataTableClasses } from './DataTableRoot';
export var SelectRowCheckbox = memo(function () {
    var _a = useDataTableCallbacksContext(), handleToggleItem = _a.handleToggleItem, isRowSelectable = _a.isRowSelectable;
    var selectedIds = useDataTableSelectedIdsContext();
    var translate = useTranslate();
    var record = useRecordContext();
    if (!record) {
        throw new Error('SelectRowTableCell can only be used within a RecordContext');
    }
    var selectable = !isRowSelectable || isRowSelectable(record);
    var selected = selectedIds === null || selectedIds === void 0 ? void 0 : selectedIds.includes(record.id);
    var handleToggleSelection = useCallback(function (event) {
        if (!selectable || !handleToggleItem)
            return;
        handleToggleItem(record.id, event);
        event.stopPropagation();
    }, [record.id, handleToggleItem, selectable]);
    return (React.createElement(Checkbox, { "aria-label": translate('ra.action.select_row', {
            _: 'Select this row',
        }), color: "primary", className: "select-item ".concat(DataTableClasses.checkbox), checked: selectable && selected, onClick: handleToggleSelection, disabled: !selectable }));
});
SelectRowCheckbox.displayName = 'SelectRowTableCell';
//# sourceMappingURL=SelectRowCheckbox.js.map