import * as React from 'react';
import { memo } from 'react';
import { TableCell, TableHead, TableRow } from '@mui/material';
import { styled, useThemeProps, } from '@mui/material/styles';
import clsx from 'clsx';
import { useDataTableConfigContext, useDataTableDataContext, useDataTableCallbacksContext, } from 'ra-core';
import ExpandAllButton from '../datagrid/ExpandAllButton';
import { SelectPageCheckbox } from './SelectPageCheckbox';
import { DataTableClasses } from './DataTableRoot';
/**
 * The default DataTable Head component.
 *
 * Renders select all checkbox as well as column head buttons used for sorting.
 */
export var DataTableHead = memo(function (inProps) {
    var props = useThemeProps({
        props: inProps,
        name: PREFIX,
    });
    var children = props.children, className = props.className, sx = props.sx;
    var _a = useDataTableConfigContext(), expand = _a.expand, expandSingle = _a.expandSingle, _b = _a.hasBulkActions, hasBulkActions = _b === void 0 ? false : _b;
    var data = useDataTableDataContext();
    var handleToggleItem = useDataTableCallbacksContext().handleToggleItem;
    var hasExpand = !!expand;
    return (React.createElement(TableHeadStyled, { className: clsx(className, DataTableClasses.thead), sx: sx },
        React.createElement(TableRow, { className: clsx(DataTableClasses.row, DataTableClasses.headerRow) },
            hasExpand && (React.createElement(TableCell, { padding: "none", variant: "head", className: clsx(DataTableClasses.headerCell, DataTableClasses.expandHeader) }, !expandSingle && data ? (React.createElement(ExpandAllButton, { classes: DataTableClasses, ids: data.map(function (record) { return record.id; }) })) : null)),
            hasBulkActions && handleToggleItem && (React.createElement(TableCell, { padding: "checkbox", variant: "head", className: DataTableClasses.headerCell },
                React.createElement(SelectPageCheckbox, null))),
            children)));
});
DataTableHead.displayName = 'DataTableHead';
var PREFIX = 'RaDataTableHead';
var TableHeadStyled = styled(TableHead, {
    name: PREFIX,
    overridesResolver: function (props, styles) { return styles.root; },
})(function () { return ({}); });
//# sourceMappingURL=DataTableHead.js.map