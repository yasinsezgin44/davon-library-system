var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { FieldTitle, useTranslate, useDataTableCallbacksContext, useDataTableSortContext, useDataTableStoreContext, useResourceContext, useStore, useTranslateLabel, } from 'ra-core';
import { TableCell, TableSortLabel, Tooltip, useThemeProps, } from '@mui/material';
import { styled } from '@mui/material/styles';
import clsx from 'clsx';
import { DataTableClasses } from './DataTableRoot';
var oppositeOrder = {
    ASC: 'DESC',
    DESC: 'ASC',
};
var PREFIX = 'RaDataTableHeadCell';
export var DataTableHeadCell = React.memo(React.forwardRef(function (inProps, ref) {
    var props = useThemeProps({
        props: inProps,
        name: PREFIX,
    });
    var cellSx = props.cellSx, className = props.className, cellClassName = props.cellClassName, disableSort = props.disableSort, headerClassName = props.headerClassName, field = props.field, render = props.render, source = props.source, label = props.label, sortByOrder = props.sortByOrder, rest = __rest(props, ["cellSx", "className", "cellClassName", "disableSort", "headerClassName", "field", "render", "source", "label", "sortByOrder"]);
    var _a = useDataTableStoreContext(), storeKey = _a.storeKey, defaultHiddenColumns = _a.defaultHiddenColumns;
    var sort = useDataTableSortContext();
    var handleSort = useDataTableCallbacksContext().handleSort;
    var hiddenColumns = useStore(storeKey, defaultHiddenColumns)[0];
    var resource = useResourceContext();
    var translate = useTranslate();
    var translateLabel = useTranslateLabel();
    var isColumnHidden = hiddenColumns.includes(source);
    if (isColumnHidden)
        return null;
    var nextSortOrder = sort && sort.field === source
        ? oppositeOrder[sort.order]
        : sortByOrder !== null && sortByOrder !== void 0 ? sortByOrder : 'ASC';
    var fieldLabel = translateLabel({
        label: typeof label === 'string' ? label : undefined,
        resource: resource,
        source: source,
    });
    var sortLabel = translate('ra.sort.sort_by', {
        field: fieldLabel,
        field_lower_first: typeof fieldLabel === 'string'
            ? fieldLabel.charAt(0).toLowerCase() +
                fieldLabel.slice(1)
            : undefined,
        order: translate("ra.sort.".concat(nextSortOrder)),
        _: translate('ra.action.sort'),
    });
    return (React.createElement(TableCellStyled, __assign({ ref: ref, className: clsx(DataTableClasses.headerCell, className, headerClassName, "column-".concat(source)), variant: "head" }, rest), handleSort && sort && !disableSort && source ? (React.createElement(Tooltip, { title: sortLabel, placement: props.align === 'right'
            ? 'bottom-end'
            : 'bottom-start', enterDelay: 300 },
        React.createElement(TableSortLabel, { active: sort.field === source, direction: sort.order === 'ASC' ? 'asc' : 'desc', "data-field": source, "data-order": sortByOrder || 'ASC', onClick: handleSort },
            React.createElement(FieldTitle, { label: label, source: source, resource: resource })))) : (React.createElement(TableSortLabel, { disabled: true },
        React.createElement(FieldTitle, { label: label, source: source, resource: resource })))));
}));
DataTableHeadCell.displayName = 'DataTableHeadCell';
var TableCellStyled = styled(TableCell, {
    name: PREFIX,
    overridesResolver: function (props, styles) { return styles.root; },
})(function () { return ({}); });
//# sourceMappingURL=DataTableHeadCell.js.map