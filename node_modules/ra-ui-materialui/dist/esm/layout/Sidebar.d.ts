import * as React from 'react';
import { type ComponentsOverrides } from '@mui/material/styles';
import type { ReactElement } from 'react';
import { type DrawerProps } from '@mui/material';
export declare const Sidebar: (inProps: SidebarProps) => React.JSX.Element;
export interface SidebarProps extends DrawerProps {
    appBarAlwaysOn?: boolean;
    children: ReactElement;
    closedSize?: number;
    size?: number;
}
export declare const SidebarClasses: {
    docked: string;
    paper: string;
    paperAnchorLeft: string;
    paperAnchorRight: string;
    paperAnchorTop: string;
    paperAnchorBottom: string;
    paperAnchorDockedLeft: string;
    paperAnchorDockedTop: string;
    paperAnchorDockedRight: string;
    paperAnchorDockedBottom: string;
    modal: string;
    fixed: string;
    appBarCollapsed: string;
};
export declare const DRAWER_WIDTH = 240;
export declare const CLOSED_DRAWER_WIDTH = 55;
declare module '@mui/material/styles' {
    interface ComponentNameToClassKey {
        RaSidebar: 'root' | 'docked' | 'paper' | 'paperAnchorLeft' | 'paperAnchorRight' | 'paperAnchorTop' | 'paperAnchorBottom' | 'paperAnchorDockedLeft' | 'paperAnchorDockedTop' | 'paperAnchorDockedRight' | 'paperAnchorDockedBottom' | 'modal' | 'fixed' | 'appBarCollapsed';
    }
    interface ComponentsPropsList {
        RaSidebar: Partial<SidebarProps>;
    }
    interface Components {
        RaSidebar?: {
            defaultProps?: ComponentsPropsList['RaSidebar'];
            styleOverrides?: ComponentsOverrides<Omit<Theme, 'components'>>['RaSidebar'];
        };
    }
}
//# sourceMappingURL=Sidebar.d.ts.map