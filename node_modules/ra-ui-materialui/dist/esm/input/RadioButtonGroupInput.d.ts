import * as React from 'react';
import { type ComponentsOverrides } from '@mui/material/styles';
import { type FormControlProps, type RadioGroupProps } from '@mui/material';
import { type ChoicesProps } from 'ra-core';
import type { CommonInputProps } from './CommonInputProps';
/**
 * An Input component for a radio button group, using an array of objects for the options
 *
 * Pass possible options as an array of objects in the 'choices' attribute.
 *
 * By default, the options are built from:
 *  - the 'id' property as the option value,
 *  - the 'name' property as the option text
 * @example
 * const choices = [
 *    { id: 'M', name: 'Male' },
 *    { id: 'F', name: 'Female' },
 * ];
 * <RadioButtonGroupInput source="gender" choices={choices} />
 *
 * You can also customize the properties to use for the option name and value,
 * thanks to the 'optionText' and 'optionValue' attributes.
 * @example
 * const choices = [
 *    { _id: 123, full_name: 'Leo Tolstoi', sex: 'M' },
 *    { _id: 456, full_name: 'Jane Austen', sex: 'F' },
 * ];
 * <RadioButtonGroupInput source="author_id" choices={choices} optionText="full_name" optionValue="_id" />
 *
 * `optionText` also accepts a function, so you can shape the option text at will:
 * @example
 * const choices = [
 *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },
 *    { id: 456, first_name: 'Jane', last_name: 'Austen' },
 * ];
 * const optionRenderer = choice => `${choice.first_name} ${choice.last_name}`;
 * <CheckboxGroupInput source="recipients" choices={choices} optionText={optionRenderer} />
 *
 * `optionText` also accepts a React Element, that can access
 * the related choice through the `useRecordContext` hook. You can use Field components there.
 * @example
 * const choices = [
 *    { id: 123, first_name: 'Leo', last_name: 'Tolstoi' },
 *    { id: 456, first_name: 'Jane', last_name: 'Austen' },
 * ];
 * const FullNameField = () => {
 *     const record = useRecordContext();
 *     return (<span>{record.first_name} {record.last_name}</span>)
 * };
 * <RadioButtonGroupInput source="recipients" choices={choices} optionText={<FullNameField />}/>
 *
 * The choices are translated by default, so you can use translation identifiers as choices:
 * @example
 * const choices = [
 *    { id: 'M', name: 'myroot.gender.male' },
 *    { id: 'F', name: 'myroot.gender.female' },
 * ];
 *
 * However, in some cases (e.g. inside a `<ReferenceInput>`), you may not want
 * the choice to be translated. In that case, set the `translateChoice` prop to false.
 * @example
 * <RadioButtonGroupInput source="gender" choices={choices} translateChoice={false}/>
 *
 * The object passed as `options` props is passed to the Material UI <RadioButtonGroup> component
 */
export declare const RadioButtonGroupInput: (inProps: RadioButtonGroupInputProps) => React.JSX.Element;
export type RadioButtonGroupInputProps = Omit<CommonInputProps, 'source'> & ChoicesProps & FormControlProps & RadioGroupProps & {
    options?: RadioGroupProps;
    source?: string;
};
export declare const RadioButtonGroupInputClasses: {
    label: string;
};
declare module '@mui/material/styles' {
    interface ComponentNameToClassKey {
        RaRadioButtonGroupInput: 'root' | 'label';
    }
    interface ComponentsPropsList {
        RaRadioButtonGroupInput: Partial<RadioButtonGroupInputProps>;
    }
    interface Components {
        RaRadioButtonGroupInput?: {
            defaultProps?: ComponentsPropsList['RaRadioButtonGroupInput'];
            styleOverrides?: ComponentsOverrides<Omit<Theme, 'components'>>['RaRadioButtonGroupInput'];
        };
    }
}
//# sourceMappingURL=RadioButtonGroupInput.d.ts.map