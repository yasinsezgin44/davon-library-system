import * as React from 'react';
import { CircularProgress, InputAdornment } from '@mui/material';
import { styled, useThemeProps, } from '@mui/material/styles';
import { useTimeout } from 'ra-core';
import { ResettableTextField } from './ResettableTextField';
/**
 * An input placeholder with a loading indicator
 *
 * Avoids visual jumps when replaced by a form input
 */
export var LoadingInput = function (inProps) {
    var props = useThemeProps({
        props: inProps,
        name: PREFIX,
    });
    var fullWidth = props.fullWidth, label = props.label, helperText = props.helperText, margin = props.margin, size = props.size, sx = props.sx, _a = props.timeout, timeout = _a === void 0 ? 1000 : _a, variant = props.variant;
    var oneSecondHasPassed = useTimeout(timeout);
    return (React.createElement(StyledResettableTextField, { sx: sx, label: label, helperText: helperText, fullWidth: fullWidth, variant: variant, margin: margin, size: size, disabled: true, onChange: function () { }, InputProps: {
            endAdornment: (React.createElement(InputAdornment, { position: "end" }, oneSecondHasPassed ? (React.createElement(CircularProgress, { color: "inherit", size: 20 })) : (
            // use an adornment of the same size to avoid visual jumps
            React.createElement("span", { style: { width: 20 } }, "\u00A0")))),
        } }));
};
var PREFIX = 'RaLoadingInput';
// make it look just like a regular input, even though it's disabled
// because the loading indicator is enough
var StyledResettableTextField = styled(ResettableTextField, {
    name: PREFIX,
    overridesResolver: function (props, styles) { return styles.root; },
})(function (_a) {
    var theme = _a.theme;
    return ({
        '& .MuiInputLabel-root.Mui-disabled': {
            color: (theme.vars || theme).palette.text.secondary,
        },
        '& .MuiFilledInput-root.Mui-disabled': {
            background: (theme.vars || theme).palette.action.disabledBackground,
        },
        '& .MuiFilledInput-root.Mui-disabled:before': {
            borderBottomStyle: 'solid',
        },
    });
});
//# sourceMappingURL=LoadingInput.js.map