var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as React from 'react';
import { useReducer, useRef } from 'react';
import { useNotify, useRecordContext, useResourceContext, useTranslate, useUpdate, Form, RecordContextProvider, } from 'ra-core';
import isEqual from 'lodash/isEqual';
import { styled } from '@mui/material/styles';
import { Box, IconButton } from '@mui/material';
import SaveIcon from '@mui/icons-material/Save';
import CloseIcon from '@mui/icons-material/Close';
import { TextInput } from '../TextInput';
import { TextField } from '../../field';
/**
 * Renders a value, and on click it turns into an editable field.
 *
 * The editable field is rendered inside a Form component, so InPlaceEditor
 * cannot be used inside another Form component.
 */
export var InPlaceEditor = function (props) {
    var source = props.source, mutationMode = props.mutationMode, _a = props.mutationOptions, mutationOptions = _a === void 0 ? {} : _a, sx = props.sx, cancelOnBlur = props.cancelOnBlur, _b = props.children, children = _b === void 0 ? source ? (React.createElement(TextField, { source: source, variant: "body1", component: "div", sx: { marginBottom: '5px' } })) : null : _b, _c = props.editor, editor = _c === void 0 ? source ? (React.createElement(TextInput, { source: source, size: "small", margin: "none", label: false, variant: "standard", autoFocus: true, helperText: false })) : null : _c, showButtons = props.showButtons, notifyOnSuccess = props.notifyOnSuccess;
    if (!source && !children && !editor) {
        throw new Error('InPlaceEditor requires either a source prop or children or editor prop');
    }
    if (mutationMode === 'undoable' && !notifyOnSuccess) {
        throw new Error('InPlaceEditor requires notifyOnSuccess to be true when mutationMode is undoable');
    }
    var submitButtonRef = useRef(null);
    var _d = useReducer(function (_, action) {
        switch (action.type) {
            case 'edit':
                return { state: 'editing' };
            case 'save':
                return { state: 'saving', values: action.values };
            case 'error':
            case 'success':
            case 'cancel':
                return { state: 'reading' };
            default:
                throw new Error('Unhandled action');
        }
    }, { state: 'reading' }), state = _d[0], dispatch = _d[1];
    var record = useRecordContext();
    var resource = useResourceContext(props);
    var notify = useNotify();
    var translate = useTranslate();
    var update = useUpdate()[0];
    var mutationMeta = mutationOptions.meta, _e = mutationOptions.onSuccess, onSuccess = _e === void 0 ? function () {
        dispatch({ type: 'success' });
        if (mutationMode !== 'undoable' && !notifyOnSuccess)
            return;
        notify("resources.".concat(resource, ".notifications.updated"), {
            type: 'info',
            messageArgs: {
                smart_count: 1,
                _: translate('ra.notification.updated', {
                    smart_count: 1,
                }),
            },
            undoable: mutationMode === 'undoable',
        });
    } : _e, _f = mutationOptions.onError, onError = _f === void 0 ? function (error) {
        notify('ra.notification.http_error', {
            type: 'error',
            messageArgs: { _: error.message },
        });
        dispatch({ type: 'error', error: error });
    } : _f, otherMutationOptions = __rest(mutationOptions, ["meta", "onSuccess", "onError"]);
    var handleSave = function (values) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            if (!record) {
                throw new Error('No record found');
            }
            if (isEqual(values, record)) {
                dispatch({ type: 'cancel' });
                return [2 /*return*/];
            }
            dispatch({ type: 'save', values: values });
            update(resource, {
                id: record.id,
                data: values,
                previousData: record,
                meta: mutationMeta,
            }, __assign({ onSuccess: onSuccess, onError: onError, mutationMode: mutationMode }, otherMutationOptions));
            return [2 /*return*/];
        });
    }); };
    var handleEdit = function () {
        dispatch({ type: 'edit' });
    };
    var handleCancel = function () {
        dispatch({ type: 'cancel' });
    };
    var handleKeyDown = function (event) {
        if (event.key === 'Escape') {
            dispatch({ type: 'cancel' });
        }
    };
    var handleBlur = function (event) {
        if (event.relatedTarget) {
            return;
        }
        if (cancelOnBlur) {
            dispatch({ type: 'cancel' });
            return;
        }
        if (state.state === 'editing') {
            // trigger the parent form submit
            // to save the changes
            submitButtonRef.current.click();
        }
    };
    var renderContent = function () {
        switch (state.state) {
            case 'reading':
                return (React.createElement(Box, { onClick: handleEdit, className: InPlaceEditorClasses.reading }, children));
            case 'editing':
                return (React.createElement(Form, { onSubmit: handleSave },
                    React.createElement(Box, { onKeyDown: handleKeyDown, onBlur: handleBlur, className: InPlaceEditorClasses.editing },
                        editor,
                        showButtons ? (React.createElement(React.Fragment, null,
                            React.createElement(IconButton, { size: "small", type: "submit", ref: submitButtonRef, "aria-label": translate('ra.action.save') },
                                React.createElement(SaveIcon, { fontSize: "small" })),
                            React.createElement(IconButton, { size: "small", onClick: handleCancel, "aria-label": translate('ra.action.cancel') },
                                React.createElement(CloseIcon, { fontSize: "small" })))) : (React.createElement("button", { type: "submit", style: { display: 'none' }, ref: submitButtonRef })))));
            case 'saving':
                // set a custom record context with the new values
                // to avoid flickering
                return (React.createElement(RecordContextProvider, { value: state.values },
                    React.createElement(Box, { className: InPlaceEditorClasses.saving }, children)));
            default:
                throw new Error('Unhandled state');
        }
    };
    return React.createElement(Root, { sx: sx }, renderContent());
};
var PREFIX = 'RaInPlaceEditor';
var InPlaceEditorClasses = {
    reading: "".concat(PREFIX, "-reading"),
    editing: "".concat(PREFIX, "-editing"),
    saving: "".concat(PREFIX, "-saving"),
};
var Root = styled('div', {
    name: PREFIX,
    overridesResolver: function (props, styles) { return styles.root; },
})(function (_a) {
    var _b;
    var theme = _a.theme;
    return (_b = {},
        _b["& .".concat(InPlaceEditorClasses.reading)] = {
            cursor: 'pointer',
            '&:hover': {
                backgroundColor: theme.palette.action.hover,
            },
        },
        _b["& .".concat(InPlaceEditorClasses.editing)] = {
            display: 'flex',
            alignItems: 'center',
            gap: 1,
        },
        _b["& .".concat(InPlaceEditorClasses.saving)] = { opacity: 0.5 },
        _b);
});
//# sourceMappingURL=InPlaceEditor.js.map