"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useSelectAll = void 0;
var react_query_1 = require("@tanstack/react-query");
var notification_1 = require("../../notification");
var dataProvider_1 = require("../../dataProvider");
var useRecordSelection_1 = require("./useRecordSelection");
var core_1 = require("../../core");
var util_1 = require("../../util");
/**
 * Get a callback to select all records of a resource (capped by the limit parameter)
 *
 * @param {Object} params The hook parameters { resource, sort, filter }
 * @returns {Function} handleSelectAll A function to select all items of a list
 *
 * @example
 * import { List, Datagrid, BulkActionsToolbar, BulkDeleteButton, useListContext, useSelectAll } from 'react-admin';
 *
 * const MySelectAllButton = () => {
 *   const { sort, filter } = useListContext();
 *   const handleSelectAll = useSelectAll({ resource: 'posts', sort, filter });
 *   const handleClick = () => handleSelectAll({
 *       queryOptions: { meta: { foo: 'bar' } },
 *       limit: 250,
 *   });
 *   return <button onClick={handleClick}>Select All</button>;
 * };
 *
 * const PostBulkActionsToolbar = () => (
 *     <BulkActionsToolbar actions={<MySelectAllButton/>}>
 *         <BulkDeleteButton />
 *     </BulkActionsToolbar>
 * );
 *
 * export const PostList = () => (
 *     <List>
 *         <Datagrid bulkActionsToolbar={<PostBulkActionsToolbar />}>
 *             ...
 *         </Datagrid>
 *     </List>
 * );
 */
var useSelectAll = function (params) {
    var sort = params.sort, filter = params.filter;
    var resource = (0, core_1.useResourceContext)(params);
    if (!resource) {
        throw new Error('useSelectAll should be used inside a ResourceContextProvider or passed a resource prop');
    }
    var dataProvider = (0, dataProvider_1.useDataProvider)();
    var queryClient = (0, react_query_1.useQueryClient)();
    var _a = (0, useRecordSelection_1.useRecordSelection)({ resource: resource }), select = _a[1].select;
    var notify = (0, notification_1.useNotify)();
    var handleSelectAll = (0, util_1.useEvent)(function (_a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.queryOptions, queryOptions = _c === void 0 ? {} : _c, _d = _b.limit, limit = _d === void 0 ? 250 : _d;
        return __awaiter(void 0, void 0, void 0, function () {
            var meta, onSuccess, onError, otherQueryOptions, results, allIds, error_1;
            var _e;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        meta = queryOptions.meta, onSuccess = queryOptions.onSuccess, onError = queryOptions.onError, otherQueryOptions = __rest(queryOptions, ["meta", "onSuccess", "onError"]);
                        _f.label = 1;
                    case 1:
                        _f.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, queryClient.fetchQuery(__assign({ queryKey: [
                                    resource,
                                    'getList',
                                    {
                                        pagination: { page: 1, perPage: limit },
                                        sort: sort,
                                        filter: filter,
                                        meta: meta,
                                    },
                                ], queryFn: function () {
                                    return dataProvider.getList(resource, {
                                        pagination: {
                                            page: 1,
                                            perPage: limit,
                                        },
                                        sort: sort,
                                        filter: filter,
                                        meta: meta,
                                    });
                                } }, otherQueryOptions))];
                    case 2:
                        results = _f.sent();
                        allIds = ((_e = results.data) === null || _e === void 0 ? void 0 : _e.map(function (_a) {
                            var id = _a.id;
                            return id;
                        })) || [];
                        select(allIds);
                        if (allIds.length === limit) {
                            notify('ra.message.select_all_limit_reached', {
                                messageArgs: { max: limit },
                                type: 'warning',
                            });
                        }
                        if (onSuccess) {
                            onSuccess(results);
                        }
                        return [2 /*return*/, results.data];
                    case 3:
                        error_1 = _f.sent();
                        if (onError) {
                            onError(error_1);
                        }
                        else {
                            notify('ra.notification.http_error', { type: 'warning' });
                        }
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    });
    return handleSelectAll;
};
exports.useSelectAll = useSelectAll;
//# sourceMappingURL=useSelectAll.js.map