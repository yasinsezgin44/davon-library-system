import { APIServer, BaseResponse, FakeRestContext, CollectionItem, QueryFunction, NormalizedRequest } from './types.ts';
import { Single } from './Single.ts';
import { Database, DatabaseOptions } from './Database.ts';
import { Collection } from './Collection.ts';

export declare class SimpleRestServer implements APIServer {
    baseUrl: string;
    defaultQuery: QueryFunction;
    middlewares: Array<Middleware>;
    database: Database;
    constructor({ baseUrl, defaultQuery, database, middlewares, ...options }?: BaseServerOptions);
    /**
     * @param Function ResourceName => object
     */
    setDefaultQuery(query: QueryFunction): void;
    getContext(normalizedRequest: NormalizedRequest): FakeRestContext;
    handle(normalizedRequest: NormalizedRequest): Promise<BaseResponse>;
    handleRequest(context: FakeRestContext): BaseResponse;
    addMiddleware(middleware: Middleware): void;
    addCollection<T extends CollectionItem = CollectionItem>(name: string, collection: Collection<T>): void;
    getCollection(name: string): Collection<any>;
    getCollectionNames(): string[];
    addSingle<T extends CollectionItem = CollectionItem>(name: string, single: Single<T>): void;
    getSingle(name: string): Single<any>;
    getSingleNames(): string[];
}
export type Middleware = (context: FakeRestContext, next: (context: FakeRestContext) => Promise<BaseResponse> | BaseResponse) => Promise<BaseResponse> | BaseResponse;
export type BaseServerOptions = DatabaseOptions & {
    database?: Database;
    baseUrl?: string;
    batchUrl?: string | null;
    defaultQuery?: QueryFunction;
    middlewares?: Array<Middleware>;
};
