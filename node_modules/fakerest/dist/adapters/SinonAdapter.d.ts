import { BaseResponse, APIServer, NormalizedRequest } from '../types.ts';
import { BaseServerOptions } from '../SimpleRestServer.ts';
import { SinonFakeXMLHttpRequest } from 'sinon';

export declare class SinonAdapter {
    loggingEnabled: boolean;
    server: APIServer;
    constructor({ loggingEnabled, server, ...options }?: SinonAdapterOptions);
    getHandler(): (request: SinonFakeXMLHttpRequest) => Promise<void>;
    getNormalizedRequest(request: SinonFakeXMLHttpRequest): NormalizedRequest;
    respond(response: BaseResponse, request: SinonFakeXMLHttpRequest): void;
    log(request: SinonFakeXMLHttpRequest, response: SinonFakeRestResponse): void;
    toggleLogging(): void;
}
export declare const getSinonHandler: (options: SinonAdapterOptions) => (request: SinonFakeXMLHttpRequest) => Promise<void>;
/**
 * @deprecated Use SinonServer instead
 */
export declare const Server: typeof SinonAdapter;
export type SinonFakeRestResponse = {
    status: number;
    body: any;
    headers: Record<string, string>;
};
export type SinonAdapterOptions = BaseServerOptions & {
    server?: APIServer;
    loggingEnabled?: boolean;
};
