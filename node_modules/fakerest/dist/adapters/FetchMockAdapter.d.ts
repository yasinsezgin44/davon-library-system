import { MockResponseObject } from 'fetch-mock';
import { BaseResponse, APIServer, NormalizedRequest } from '../types.ts';
import { BaseServerOptions } from '../SimpleRestServer.ts';

export declare class FetchMockAdapter {
    loggingEnabled: boolean;
    server: APIServer;
    constructor({ loggingEnabled, server, ...options }?: FetchMockAdapterOptions);
    getHandler(): (url: string, options: RequestInit) => Promise<MockResponseObject>;
    getNormalizedRequest(request: Request): Promise<NormalizedRequest>;
    log(request: FetchMockFakeRestRequest, response: BaseResponse, normalizedRequest: NormalizedRequest): void;
    toggleLogging(): void;
}
export declare const getFetchMockHandler: (options: FetchMockAdapterOptions) => (url: string, options: RequestInit) => Promise<MockResponseObject>;
/**
 * @deprecated Use FetchServer instead
 */
export declare const FetchServer: typeof FetchMockAdapter;
export type FetchMockFakeRestRequest = Partial<Request> & {
    requestBody?: string;
    responseText?: string;
    requestJson?: Record<string, any>;
    queryString?: string;
    params?: {
        [key: string]: any;
    };
};
export type FetchMockAdapterOptions = BaseServerOptions & {
    server?: APIServer;
    loggingEnabled?: boolean;
};
